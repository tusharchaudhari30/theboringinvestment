---
apiVersion: v1
kind: Namespace
metadata:
  name: boring-project
  annotations:
    linkerd.io/inject: enabled
---
# AuthenticationService Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authenticationservice
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authenticationservice
  template:
    metadata:
      labels:
        app: authenticationservice
    spec:
      containers:
        - name: authenticationservice
          image: localhost:6000/theboringproject-authenticationservice:latest
          ports:
            - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: authenticationservice
  namespace: boring-project
spec:
  ports:
    - port: 8081
      targetPort: 8081
  selector:
    app: authenticationservice
---
# Postgres Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "portfolio_service"
            - name: POSTGRES_PASSWORD
              value: "portfolio_service"
            - name: POSTGRES_DB
              value: "portfolio_db"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: boring-project
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
---
# Redis Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          command: ["redis-server", "--appendonly", "yes"]
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
      volumes:
        - name: redis-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: boring-project
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
---
# Kafka Deployment & Service (simplified single broker KRaft mode)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      hostname: broker
      containers:
        - name: kafka
          image: apache/kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: "0"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_NODE_ID
              value: "1"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "1@broker:29093"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_LOG_DIRS
              value: "/tmp/kraft-combined-logs"
            - name: CLUSTER_ID
              value: "MkU3OEVBNTcwNTJENDM2Qk"
            - name: KAFKA_CREATE_TOPICS
              value: "stock-prices:3:1:retention.ms=5000,cleanup.policy=delete,segment.bytes=1048576"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: boring-project
spec:
  ports:
    - port: 9092
      targetPort: 9092
  selector:
    app: kafka
---
# PortfolioService Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolioservice
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portfolioservice
  template:
    metadata:
      labels:
        app: portfolioservice
    spec:
      containers:
        - name: portfolioservice
          image: localhost:6000/theboringproject-portfolioservice:latest
          ports:
            - containerPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: portfolioservice
  namespace: boring-project
spec:
  ports:
    - port: 8082
      targetPort: 8082
  selector:
    app: portfolioservice
---
# TransactionService Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transactionservice
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transactionservice
  template:
    metadata:
      labels:
        app: transactionservice
    spec:
      containers:
        - name: transactionservice
          image: localhost:6000/theboringproject-transactionservice:latest
          ports:
            - containerPort: 8083
---
apiVersion: v1
kind: Service
metadata:
  name: transactionservice
  namespace: boring-project
spec:
  ports:
    - port: 8083
      targetPort: 8083
  selector:
    app: transactionservice
---
# Elasticsearch Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
          ports:
            - containerPort: 9200
            - containerPort: 9300
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: boring-project
spec:
  selector:
    app: elasticsearch
  ports:
    - name: http
      port: 9200
      targetPort: 9200
    - name: transport
      port: 9300
      targetPort: 9300
---
# Logstash Deployment & Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: docker.elastic.co/logstash/logstash:7.10.0
          ports:
            - containerPort: 5044
            - containerPort: 9600
          volumeMounts:
            - name: logstash-pipeline
              mountPath: /usr/share/logstash/pipeline
      volumes:
        - name: logstash-pipeline
          configMap:
            name: logstash-pipeline-config
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: boring-project
spec:
  selector:
    app: logstash
  ports:
    - name: beats
      port: 5044
      targetPort: 5044
    - name: monitoring
      port: 9600
      targetPort: 9600
---
# Ingress Configuration for Routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: boring-project-gateway
  namespace: boring-project
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - host: localhost
      http:
        paths:
          - path: /authentication(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: authenticationservice
                port:
                  number: 8081
          - path: /portfolio(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: portfolioservice
                port:
                  number: 8082
          - path: /transaction(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: transactionservice
                port:
                  number: 8083
          - path: /elasticsearch(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: elasticsearch
                port:
                  number: 9200
          - path: /logstash(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: logstash
                port:
                  number: 5044
