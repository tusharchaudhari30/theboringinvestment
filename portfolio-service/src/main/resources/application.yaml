services:
  authentication:
    url: ${AUTHENTICATION_SERVICE_URL:http://localhost:8081}
server:
  port: 8082
spring:
  data:
    redis:
      host: ${REDIS_URL:localhost}
      port: 6379
      timeout: 60000
  application:
    name: portfolio-service
  kafka:
    topic:
      name: stock-prices
    bootstrap-servers: ${KAFKA_URL:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: stock-consumer-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"
  datasource:
    url: jdbc:postgresql://${POSTGRES_URL:localhost:5432}/portfolio_db
    username: portfolio_service
    password: portfolio_service
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  sql:
    init:
      mode: always # Run schema.sql & data.sql at startup
      schema-locations: classpath:schema.sql
      data-locations: classpath:data.sql
rabbitmq:
  url: amqp://${RABBITMQ_URL:localhost:5672}
