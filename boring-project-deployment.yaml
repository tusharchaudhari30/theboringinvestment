---
apiVersion: v1
kind: Namespace
metadata:
  name: boring-project
  annotations:
    linkerd.io/inject: enabled

# Frontend (React via Nginx)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontendpersonalfin
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontendpersonalfin
  template:
    metadata:
      labels:
        app: frontendpersonalfin
    spec:
      containers:
        - name: frontendpersonalfin
          image: localhost:6000/theboringproject-frontendpersonalfin:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
---
# Service for Frontend
apiVersion: v1
kind: Service
metadata:
  name: frontendpersonalfin
  namespace: boring-project
spec:
  selector:
    app: frontendpersonalfin
  ports:
    - port: 80
      targetPort: 80
# AuthenticationService
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authenticationservice
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authenticationservice
  template:
    metadata:
      labels:
        app: authenticationservice
    spec:
      containers:
        - name: authenticationservice
          image: localhost:6000/theboringproject-authenticationservice:latest
          ports:
            - containerPort: 8081
---
apiVersion: v1
kind: Service
metadata:
  name: authenticationservice
  namespace: boring-project
spec:
  selector:
    app: authenticationservice
  ports:
    - port: 8081
      targetPort: 8081

# PortfolioService
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portfolioservice
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portfolioservice
  template:
    metadata:
      labels:
        app: portfolioservice
    spec:
      containers:
        - name: portfolioservice
          image: localhost:6000/theboringproject-portfolioservice:latest
          ports:
            - containerPort: 8082
---
apiVersion: v1
kind: Service
metadata:
  name: portfolioservice
  namespace: boring-project
spec:
  selector:
    app: portfolioservice
  ports:
    - port: 8082
      targetPort: 8082

# TransactionService
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transactionservice
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transactionservice
  template:
    metadata:
      labels:
        app: transactionservice
    spec:
      containers:
        - name: transactionservice
          image: localhost:6000/theboringproject-transactionservice:latest
          ports:
            - containerPort: 8083
---
apiVersion: v1
kind: Service
metadata:
  name: transactionservice
  namespace: boring-project
spec:
  selector:
    app: transactionservice
  ports:
    - port: 8083
      targetPort: 8083

# PostgreSQL
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "portfolio_service"
            - name: POSTGRES_PASSWORD
              value: "portfolio_service"
            - name: POSTGRES_DB
              value: "portfolio_db"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: boring-project
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432

# Redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          command: ["redis-server", "--appendonly", "yes"]
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
      volumes:
        - name: redis-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: boring-project
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379

# Kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: boring-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      hostname: broker
      containers:
        - name: kafka
          image: apache/kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: "0"
            - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
              value: "1"
            - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_NODE_ID
              value: "1"
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "1@broker:29093"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_LOG_DIRS
              value: "/tmp/kraft-combined-logs"
            - name: CLUSTER_ID
              value: "MkU3OEVBNTcwNTJENDM2Qk"
            - name: KAFKA_CREATE_TOPICS
              value: "stock-prices:3:1:retention.ms=5000,cleanup.policy=delete,segment.bytes=1048576"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: boring-project
spec:
  selector:
    app: kafka
  ports:
    - port: 9092
      targetPort: 9092

# Ingress (React route removed)
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: boring-project-gateway
  namespace: boring-project
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
    - host: localhost
      http:
        paths:
          - path: /authentication(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: authenticationservice
                port:
                  number: 8081
          - path: /portfolio(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: portfolioservice
                port:
                  number: 8082
          - path: /transaction(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: transactionservice
                port:
                  number: 8083
          - path: /()(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: frontendpersonalfin
                port:
                  number: 80
