version: "0.3"

services:
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672" # RabbitMQ messaging port
      - "15672:15672" # RabbitMQ management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
  kafka:
    image: apache/kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_CREATE_TOPICS: stock-prices:3:1:retention.ms=5000,cleanup.policy=delete,segment.bytes=1048576

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: portfolio_service
      POSTGRES_PASSWORD: portfolio_service
      POSTGRES_DB: portfolio_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  authenticationservice:
    build:
      context: ./authenticationservice
    container_name: authenticationservice
    ports:
      - "8081:8081"
    depends_on:
      - postgres
      - kafka
      - redis
      - portfolioservice
    environment:
      KAFKA_URL: kafka:29092
      AUTHENTICATION_SERVICE_URL: http://authenticationservice:8081
      PORTFOLIO_SERVICE_URL: http://portfolioservice:8082
      TRANSACTION_SERVICE_URL: http://transactionservice:8083
      STOCK_DATA_FEED_URL: http://stockdatafeed:8084
      POSTGRES_URL: postgres:5432
      REDIS_URL: redis
      RABBITMQ_URL: rabbitmq:5672

  portfolioservice:
    build:
      context: ./portfolio-service
    container_name: portfolioservice
    ports:
      - "8082:8082"
    depends_on:
      - postgres
      - kafka
      - redis
    environment:
      KAFKA_URL: kafka:29092
      AUTHENTICATION_SERVICE_URL: http://authenticationservice:8081
      PORTFOLIO_SERVICE_URL: http://portfolioservice:8082
      TRANSACTION_SERVICE_URL: http://transactionservice:8083
      STOCK_DATA_FEED_URL: http://stockdatafeed:8084
      POSTGRES_URL: postgres:5432
      REDIS_URL: redis
      RABBITMQ_URL: rabbitmq:5672

  transactionservice:
    build:
      context: ./transaction-service
    container_name: transactionservice
    ports:
      - "8083:8083"
    depends_on:
      - postgres
      - kafka
      - redis
      - portfolioservice
    environment:
      KAFKA_URL: kafka:29092
      AUTHENTICATION_SERVICE_URL: http://authenticationservice:8081
      PORTFOLIO_SERVICE_URL: http://portfolioservice:8082
      TRANSACTION_SERVICE_URL: http://transactionservice:8083
      STOCK_DATA_FEED_URL: http://stockdatafeed:8084
      POSTGRES_URL: postgres:5432
      REDIS_URL: redis
      RABBITMQ_URL: rabbitmq:5672

  stockdatafeed:
    build:
      context: ./stock-data-feed
    container_name: stockdatafeed
    ports:
      - "8084:8084"
    depends_on:
      - postgres
      - kafka
      - redis
      - portfolioservice
    environment:
      KAFKA_URL: kafka:29092
      AUTHENTICATION_SERVICE_URL: http://authenticationservice:8081
      PORTFOLIO_SERVICE_URL: http://portfolioservice:8082
      TRANSACTION_SERVICE_URL: http://transactionservice:8083
      STOCK_DATA_FEED_URL: http://stockdatafeed:8084
      POSTGRES_URL: postgres:5432
      REDIS_URL: redis
      RABBITMQ_URL: rabbitmq:5672

  frontend:
    build:
      context: ./personalfin-frontend
    container_name: frontend
    ports:
      - "3000:80"

  nginx:
    image: nginx:latest
    container_name: boring-nginx
    depends_on:
      - authenticationservice
      - portfolioservice
      - transactionservice
      - frontend
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro

volumes:
  redis_data:
  postgres_data:
